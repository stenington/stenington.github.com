{
  "name": "coquette",
  "description": "A micro framework for JavaScript games.",
  "author": {
    "name": "Mary Rose Cook",
    "email": "maryrosecook@maryrosecook.com",
    "url": "http://maryrosecook.com/"
  },
  "version": "0.4.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/maryrosecook/coquette.git"
  },
  "scripts": {
    "test": "node_modules/jasmine-node/bin/jasmine-node spec/",
    "minify": "node scripts/minifier.js",
    "prepublish": "node scripts/minifier.js"
  },
  "devDependencies": {
    "node.packer": "2.0.0",
    "jasmine-node": "1.7.1"
  },
  "readme": "# Coquette\n\nA micro framework for JavaScript games.\n\nHandles collision detection, the game update loop, canvas rendering, and keyboard and mouse input.\n\nhttp://coquette.maryrosecook.com\n\n## Get the code\n\n* Minified: https://github.com/maryrosecook/coquette/coquette-min.js\n* Single file: https://github.com/maryrosecook/coquette/coquette.js\n* GitHub: https://github.com/maryrosecook/coquette\n* `$ npm install coquette`\n\n## Example\n\nA game where you, the valiant player, must find a person of indeterminate gender in distress so you can take them away from all this.  The code below appears in `/demos/simple/`.  Open `/demos/simple/index.html` to play.\n\nThe HTML below defines a canvas element and loads in Coquette and the game code.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"../../coquette.js\"></script>\n    <script type=\"text/javascript\" src=\"game.js\"></script>\n  </head>\n  <body><canvas id=\"canvas\"></canvas></body>\n</html>\n```\n\nThe game code:\n\n```javascript\nvar Game = function() {\n  this.c = new Coquette(this, \"canvas\", 500, 150, \"#000\");\n\n  // paramour\n  this.c.entities.create(Person, { center: { x:250, y:40 }, color:\"#099\" });\n\n  // player\n  this.c.entities.create(Person, { center: { x:256, y:110 }, color:\"#f07\",\n    update: function() {\n      if (this.c.inputter.isDown(this.c.inputter.UP_ARROW)) {\n        this.center.y -= 0.4;\n      }\n    },\n\n    collision: function(other) {\n      other.center.y = this.center.y; // follow the player\n    }\n  });\n};\n\nvar Person = function(game, settings) {\n  this.c = game.c;\n  for (var i in settings) {\n    this[i] = settings[i];\n  }\n\n  this.size = { x:9, y:9 };\n  this.draw = function(ctx) {\n    ctx.fillStyle = settings.color;\n    ctx.fillRect(this.center.x - this.size.x / 2,\n                 this.center.y - this.size.y / 2,\n                 this.size.x,\n                 this.size.y);\n  };\n};\n\nwindow.addEventListener('load', function() {\n  new Game();\n});\n```\n\n## Demos\n\nFour demos are included in this repository:\n\n* `/demos/spinning-shapes` - an example of collisions between rotated entities.\n* `/demos/box2d-physics` - a game that uses the Box2D physics engine.\n* `/demos/leftrightspace` - a complete game.\n* `/demos/simple` - the example at the top of this readme.\n\n## Reference\n\n### Instantiate Coquette\n\nPass in:\n\n* Your main game object.\n* The ID of the canvas element, e.g. `\"canvas\"`.\n* The desired width of the canvas element.\n* The desired height of the canvas element.\n* The background colour of your game, e.g. `\"#000\"`.\n\n```javascript\nvar YourGame = function() {\n  this.c = new Coquette(this, \"canvas\", 150, 150, \"#000\");\n};\n```\n\n### Modules\n\nWhen you instantiate Coquette, you get an object that has some modules. You can use these modules in your game.\n\n#### Entities\n\nKeeps track of all the entities in the game: the player, enemies, obstacles.\n\n##### Define an entity\n\nMost entities will have these attributes:\n\n* `center`: The center of the entity, e.g. `{ x: 10, y: 20 }`\n* `size`: The size of the entity, e.g. `{ x: 50, y: 30 }`\n* `angle`: The orientation of the entity in degrees, e.g. `30`\n\nAnd these methods:\n\n* `update(timeSinceLastTick)`: Called every tick.  You should change the state of the entity in this method.\n* `draw(canvasCtx)`: Called every tick.  You should draw the entity upright in this method.  The drawing will automatically get rotated to the orientation indicated by `angle`.\n\nFor example:\n\n```javascript\nvar Block = function(game, settings) {\n  this.game = game;\n  this.center = settings.center;\n  this.size = settings.size;\n  this.angle = 30;\n};\n\nBlock.prototype = {\n  update: function(timeSinceLastTick) {\n    this.center.x += 0.02 * timeSinceLastTick;\n    this.center.y += 0.02 * timeSinceLastTick;\n  },\n\n  draw: function(canvasCtx) {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(this.center.x - this.size.x / 2,\n                 this.center.y - this.size.y / 2,\n                 this.size.x,\n                 this.size.y);\n  }\n};\n\n```\n\nSee the Collider section for instructions on enabling collision detection.\n\n##### Create an entity\n\nCall `c.entities.create()` with:\n\n* The constructor function of the entity you want to create, e.g. `Block`.\n* An optional settings object that will be passed into the constructor, e.g. `{ center: { x: 5, y: 10 }, size: { x: 10, y: 30 } }`.\n\nReturns the created entity.\n\n```javascript\nvar Block = function(game, settings) {\n  this.game = game;\n  this.center = settings.center;\n  this.size = settings.size;\n  this.angle = 0;\n};\n\nvar myBlock = c.entities.create(Block, {\n  center: { x: 5, y: 10 },\n  size: { x: 10, y: 30 }\n});\n```\n\n##### Destroy an entity\n\nCall `c.entities.destroy()` with:\n\n* The entity you want to destroy, e.g. `myBlock`.\n\n```javascript\nc.entities.destroy(myBlock);\n```\n\n##### Get all the entities in the game\n\n```javascript\nvar all = c.entities.all();\n```\n\n##### Get all the entities of a certain type\n\n```javascript\nvar invaders = c.entities.all(Invader);\n```\n\n#### Inputter\n\nHandles keyboard and mouse input from the player.\n\n##### Find out if a certain key or mouse button is down\n\n```javascript\nvar leftArrowDown = c.inputter.isDown(c.inputter.LEFT_ARROW);\nvar rightMouseDown = c.inputter.isDown(c.inputter.RIGHT_MOUSE);\n```\n\n##### Find out if a certain key or mouse button is pressed\n\nThis returns true for the tick following the key going down.  In subsequent ticks, it returns false until the key is released and pressed down again.\n\n```javascript\nvar leftArrowPressed = c.inputter.isPressed(c.inputter.LEFT_ARROW);\nvar rightMousePressed = c.inputter.isPressed(c.inputter.RIGHT_MOUSE);\n```\n\n##### Run a function every time the mouse is moved\n\n```javascript\nc.inputter.bindMouseMove(function(position) {\n  console.log(\"The mouse is at\", position.x, position.y);\n});\n```\n\n`position` is relative to the game canvas.  If the mouse pointer is in the top left corner, position will be `{ x: 0, y: 0 }`.\n\n##### Get the current mouse position\n\n```javascript\nvar position = c.inputter.getMousePosition();\n```\n\n`position` is relative to the game canvas.  If the mouse pointer is in the top left corner, position will be `{ x: 0, y: 0 }`.\n\n#### Renderer\n\nHolds the canvas drawing context.  Calls `draw()` on the main game object and all the game entities.\n\n##### Draw an entity\n\nSee the Define an Entity sub-section of the Entities section.\n\n##### Get the canvas drawing context\n\n```javascript\n  var ctx = c.renderer.getCtx();\n  ctx.fillStyle = \"#f00\";\n  ctx.fillRect(0, 0, 10, 10);\n```\n\n##### Set the order that entities are drawn\n\nWhen you create your entities, set an integer `zindex` attribute on them.  An entity with a higher `zindex` will get drawn on top of an entity with a lower `zindex`.  The default `zindex` is `0`.\n\n```javascript\n  var BackgroundTile = function() {\n    this.zindex = -1;\n  };\n\n  var Player = function() {\n    this.zindex = 0;\n  };\n\n  c.entities.create(BackgroundTile, {});\n  c.entities.create(Player, {}); // drawn on top\n```\n\n##### Move the view\n\nYou can use `c.renderer.setViewCenter()` to move the view around the world.  For example, to make the view follow a specific object, you could call `setViewCenter(specificObj.center)` in the `update()` function of your game:\n\n```javascript\n  var Game = function() {\n    var c = new Coquette(this, \"canvas\", 500, 500, \"#000\");\n    var specialObject = c.entities.create(SpecialObject, {});\n\n    this.update = function() {\n      c.renderer.setViewCenter(specialObject.center);\n    };\n  };\n```\n\n#### Collider\n\nReports when entities collide.\n\n##### Entity setup\n\nTo make an entity support collisions, put these attributes on it:\n\n* `center`: The center of the entity, e.g. `{ x: 10, y: 20 }`.\n* `size`: The size of the entity, e.g. `{ x: 50, y: 30 }`.\n* `boundingBox`: The shape that best approximates the shape of the entity, either `c.collider.RECTANGLE` or `c.collider.CIRCLE`.\n* `angle`: The orientation of the entity in degrees, e.g. `30`.\n\nAnd, optionally, these methods:\n\n* `collision(other, type)`: Called when the entity collides with another entity.  Takes `other`, the other entity involved in the collision.  Takes `type`, which will be `c.collider.INITIAL` if the entities were not colliding in the previous tick, or `c.collider.SUSTAINED` if the entities were colliding in the previous tick.\n* `uncollision(other)`: Called when the entity stops colliding with another entity.  Takes `other`, the other entity involved in the collision.\n\nFor example:\n\n```javascript\nvar Player = function() {\n  this.center = { x: 10, y: 20 };\n  this.size = { x: 50, y: 50 };\n  this.boundingBox = c.collider.CIRCLE;\n  this.angle = 0;\n};\n\nPlayer.prototype = {\n  collision: function(other, type) {\n    if (type === c.collider.INITIAL) {\n      console.log(\"Ow,\", other, \"hit me.\");\n    } else if (type === c.collider.SUSTAINED) {\n      console.log(\"Ow,\", other, \"is still hitting me.\");\n    }\n  },\n\n  uncollision: function(other) {\n    console.log(\"Phew,\", other, \"has stopped hitting me.\");\n  }\n};\n```\n\n## Run the tests\n\nInstall Node.js and npm: https://github.com/isaacs/npm\n\nInstall the node dependencies and run the tests with:\n\n    $ cd path/to/coquette\n    $ npm install --dev\n    $ npm test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/maryrosecook/coquette/issues"
  },
  "_id": "coquette@0.4.5",
  "dist": {
    "shasum": "8ecb5b52cd973c94bcc6e86d1fd3c585c9598046"
  },
  "_from": "coquette@",
  "_resolved": "https://registry.npmjs.org/coquette/-/coquette-0.4.5.tgz"
}
